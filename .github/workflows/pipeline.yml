name: Execute All Workflows Sequentially with Email Notifications

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  IMAGE_NAME: cloud_run
  GCS_BUCKET: airquality-mlops-rg
  REGISTRY: gcr.io/${{ secrets.GCP_PROJECT }}
  IMAGE_TAG: ${{ github.sha }}

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:
  fetch-data:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      # Step 3: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      # Step 3: Install Dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Execute fetch_data.py
        run: python fetch_data.py

  # Job 1: Trigger Airflow DAG
  trigger-dag:
    runs-on: ubuntu-latest
    needs: fetch-data

    steps:
    - name: Install Required Utilities
      run: sudo apt-get update && sudo apt-get install -y curl jq

    - name: Generate Unique DAG Run ID
      id: unique_id
      run: echo "::set-output name=dag_run_id::datapipeline_$(date +'%Y%m%d%H%M%S')"

    - name: Trigger Airflow DAG
      id: trigger_dag
      env:
        AIRFLOW_USERNAME: admin
        AIRFLOW_PASSWORD: ksmhwqrzhjllqsaz
        AIRFLOW_VM_IP: 34.170.107.190:8080
        AIRFLOW_DAG_ID: datapipeline
      run: |
        echo "Triggering Airflow DAG: $AIRFLOW_DAG_ID with unique DAG Run ID..."
        curl -X POST "http://$AIRFLOW_VM_IP/api/v1/dags/$AIRFLOW_DAG_ID/dagRuns" \
             -H "Content-Type: application/json" \
             -u "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
             -d "{\"dag_run_id\": \"${{ steps.unique_id.outputs.dag_run_id }}\"}"

    - name: Wait for DAG Completion
      id: wait_for_completion
      env:
        AIRFLOW_USERNAME: admin
        AIRFLOW_PASSWORD: ksmhwqrzhjllqsaz
        AIRFLOW_VM_IP: 34.170.107.190:8080
        AIRFLOW_DAG_ID: datapipeline
        DAG_RUN_ID: ${{ steps.unique_id.outputs.dag_run_id }}
      run: |
        echo "Polling for DAG run status..."
        while true; do
          status=$(curl -s -u "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "http://$AIRFLOW_VM_IP/api/v1/dags/$AIRFLOW_DAG_ID/dagRuns/$DAG_RUN_ID" \
            | jq -r '.state')

          echo "Current DAG run state: $status"

          if [ "$status" == "success" ]; then
            echo "DAG run completed successfully!"
            break
          elif [ "$status" == "failed" ]; then
            echo "DAG run failed!"
            exit 1
          else
            echo "DAG is still running. Waiting..."
            sleep 10
          fi
        done

    - name: Send Email Notification for DAG Completion
      if: always()
      env:
        SMTP_SERVER: "smtp.gmail.com"
        SMTP_PORT: "587"
        EMAIL_USERNAME: ${{ secrets.SMTP_EMAIL }}
        EMAIL_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        RECIPIENT_EMAIL: ${{ secrets.TO_EMAIL }}
      run: |
        echo "Airflow DAG email notification"
        (
          echo "Subject: Airflow DAG Status: ${{ job.status }}"
          echo "To: $RECIPIENT_EMAIL"
          echo ""
          echo "Airflow DAG run (ID: ${{ steps.unique_id.outputs.dag_run_id }}) completed with status: ${{ job.status }}."
        ) > email.txt

        curl --url "smtp://$SMTP_SERVER:$SMTP_PORT" --ssl-reqd \
          --mail-from "$EMAIL_USERNAME" \
          --mail-rcpt "$RECIPIENT_EMAIL" \
          --upload-file email.txt \
          --user "$EMAIL_USERNAME:$EMAIL_PASSWORD"

  # Job 2: Deploy Registry
  deploy-pipeline:
    runs-on: ubuntu-latest
    needs: trigger-dag
    permissions:
      contents: read
      id-token: write
 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
 
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
 
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      - name: Configure Docker Authentication
        run: gcloud auth configure-docker
 
      # Create a temporary credentials file
      - name: Create credentials file
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          chmod 600 /tmp/gcp-key.json
 
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg GCP_PROJECT=${{ secrets.GCP_PROJECT }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -f ./cloud_run/Dockerfile ./cloud_run
 
      - name: Run Model Training
        run: |
          docker run --rm \
            -v /tmp/gcp-key.json:/tmp/gcp-key.json:ro \
            -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
 
      - name: Push Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
 
      # Always clean up credentials
      - name: Clean up credentials
        if: always()
        run: |
          rm -f /tmp/gcp-key.json

      - name: Send Email Notification for Deploy Pipeline
        if: always()
        env:
          SMTP_SERVER: "smtp.gmail.com"
          SMTP_PORT: "587"
          EMAIL_USERNAME: ${{ secrets.SMTP_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          echo "Deploy pipeline email notification"
          (
            echo "Subject: Deploy Pipeline Status: ${{ job.status }}"
            echo "To: $RECIPIENT_EMAIL"
            echo ""
            echo "Deploy Pipeline completed with status: ${{ job.status }}."
          ) > email.txt

          curl --url "smtp://$SMTP_SERVER:$SMTP_PORT" --ssl-reqd \
            --mail-from "$EMAIL_USERNAME" \
            --mail-rcpt "$RECIPIENT_EMAIL" \
            --upload-file email.txt \
            --user "$EMAIL_USERNAME:$EMAIL_PASSWORD"

  # Job 3: Deploy to Google Cloud Functions
  deploy-endpoint:
    runs-on: ubuntu-latest
    needs: deploy-pipeline

    permissions:
      contents: read
      id-token: write

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Google Cloud SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      # Step 3: Authenticate with Google Cloud
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Step 4: Deploy to Cloud Functions
      - name: Deploy to Cloud Functions
        run: |
          gcloud functions deploy predict-function \
            --runtime python39 \
            --trigger-http \
            --region us-central1 \
            --entry-point flask_app \
            --source ./cloud_function \
            --memory 512MB \
            --allow-unauthenticated

      - name: Send Email Notification for Deploy Endpoint
        if: always()
        env:
          SMTP_SERVER: "smtp.gmail.com"
          SMTP_PORT: "587"
          EMAIL_USERNAME: ${{ secrets.SMTP_EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          RECIPIENT_EMAIL: ${{ secrets.TO_EMAIL }}
        run: |
          echo "Deploy endpoint email notification"
          (
            echo "Subject: Deploy Endpoint Status: ${{ job.status }}"
            echo "To: $RECIPIENT_EMAIL"
            echo ""
            echo "Deploy Endpoint completed with status: ${{ job.status }}."
          ) > email.txt

          curl --url "smtp://$SMTP_SERVER:$SMTP_PORT" --ssl-reqd \
            --mail-from "$EMAIL_USERNAME" \
            --mail-rcpt "$RECIPIENT_EMAIL" \
            --upload-file email.txt \
            --user "$EMAIL_USERNAME:$EMAIL_PASSWORD"

  deploy-streamlit:
    runs-on: ubuntu-latest
    needs: deploy-endpoint  # Ensure the pipeline completes before deploying Streamlit
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker Authentication
        run: gcloud auth configure-docker

      # Build the Docker image for Streamlit
      - name: Build Streamlit Docker Image
        run: |
          docker build \
            -t ${{ env.REGISTRY }}/streamlit_app:${{ env.IMAGE_TAG }} \
            -t ${{ env.REGISTRY }}/streamlit_app:latest \
            -f ./application/Dockerfile ./application

      # Push the Docker image to GCR
      - name: Push Streamlit Docker Images
        run: |
          docker push ${{ env.REGISTRY }}/streamlit_app:${{ env.IMAGE_TAG }}
          docker push ${{ env.REGISTRY }}/streamlit_app:latest

      # Deploy the Streamlit app to Cloud Run
      - name: Deploy Streamlit App to Cloud Run
        run: |
          gcloud run deploy streamlit-app \
            --image ${{ env.REGISTRY }}/streamlit_app:latest \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 8080
